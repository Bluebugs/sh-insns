const fs = require('fs');
var insns = require('../insns.json');

function padZero(opcode, code) {
    var limit = 4;

    if (code.length / 16 > 1)
	limit = 8;

    while (opcode.length < limit) opcode = '0' + opcode;

    return opcode;
}

function addFeature(features, insn, feature)
{
    if (!insn[feature]) return features;

    if (features != '')
	features += ' | ';
    
    features += 'SH_FEATURE_' + feature;

    return features;
}

var ops = {};

insns.instructions.forEach(function (insn) {
    var opcode = 0;
    var ophex;
    var features = '';
    var entry;

    features = addFeature(features, insn, 'SH1');
    features = addFeature(features, insn, 'SH2');
    features = addFeature(features, insn, 'SH2E');
    features = addFeature(features, insn, 'SH2A');
    features = addFeature(features, insn, 'SH3');
    features = addFeature(features, insn, 'SH3E');
    features = addFeature(features, insn, 'SH4');
    features = addFeature(features, insn, 'SH4A');
    features = addFeature(features, insn, 'JC');

    if (features == '') return ;

    insn.code.split('').forEach(letter => {
	opcode = opcode << 1;

	if (letter == '1') opcode |= 1;
	else if (letter == ' ') opcode = opcode >> 1;
    });

    ophex = padZero((opcode >>> 0).toString(16).toLowerCase(), insn.code);

    entry = ops[ophex];
    if (entry === undefined) {
	entry = { hex: ophex,
		  format: insn.format,
		  features: features };
    } else {
	entry.format += ' && ' + insn.format;
	entry.features += ' | ' + features;
    }
    ops[ophex] = entry;
});

var stream = fs.createWriteStream("family_features.h");

stream.once('open', function(fd) {
    stream.write("// This file autogenerated see https://github.com/Bluebugs/sh-insns/tree/master/script\n\n");

    for (var key in ops) {
	stream.write("// " + ops[key].format + "\n");
	stream.write("#define FEATURES_" + ops[key].hex + " " + ops[key].features + "\n\n");
    }

    stream.end();
});
